{"version":3,"sources":["ImageForm.js","TextForm.js","NameForm.js","TestArea.js","ThreadForm.js","Ujkerdoiv.js","Kerdoivek.js","Valasz.js","DiakMenu.js","DiakFelulet.js","TanarMenu.js","TanariFelulet.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Ujkerdoiv","props","buttonLabel","className","_useState","useState","_useState2","Object","slicedToArray","modal","setModal","toggle","react_default","a","createElement","Form","FormGroup","row","Label","for","sm","Col","Input","type","name","id","placeholder","size","check","offset","Button","onClick","Modal","onclick","isOpen","ModalHeader","ModalBody","randomNumber","Math","floor","random","ModalFooter","color","popup","_useState3","_useState4","ListGroup","UncontrolledAlert","Progress","value","Valasz","htmlFor","DiakMenu","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeTab","message","threadName","image","bind","assertThisInitialized","tab","setState","_this2","Container_default","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","src_Valasz","DiakFelulet","messages","showNavbar","appStarted","workerInitialized","show","isNameAvailable","undefined","broadcastChannel","BroadcastChannel","toggleNavbar","e","postMessage","command","preventDefault","addEventListener","receiveMessageFromWorker","Container","tag","src","alt","width","Row","src_DiakMenu","send","sendMessageToWorker","saveUsername","setThread","getImageByHash","addImageWithHashToList","TanarMenu","src_Ujkerdoiv","Kerdoivek","TanariFelulet","src_TanarMenu","App","renderLoadedState","react_router_dom","react_router","path","component","exact","Navbar","light","expand","NavbarBrand","to","NavbarToggler","Collapse","navbar","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","console","log","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0542377b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CustomInput, Button, InputGroup, InputGroupAddon, FormGroup, Form } from 'reactstrap';\r\n\r\nclass ImageForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: ''\r\n        }\r\n    }\r\n\r\n    handleImageChange = (e) => {\r\n        this.setState({\r\n            image: e.target.files[0]\r\n        });\r\n        this.props.imageUpdate(e.target.files[0]);\r\n    }\r\n\r\n    handleImageSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.image) {\r\n            this.props.send();\r\n        }\r\n        this.setState({\r\n            image: null\r\n        });\r\n        this.props.imageUpdate(null);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleImageSubmit}>\r\n                <FormGroup>\r\n                    <InputGroup>\r\n                        <CustomInput onChange={this.handleImageChange} type=\"file\" id=\"fileBrowser\" name=\"imageFileUpload\" />\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <Button outline color=\"danger\">Send</Button>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageForm;","import React from 'react'\r\nimport { Button, Input, InputGroup, InputGroupAddon, FormGroup, Form } from 'reactstrap';\r\n\r\nclass TextForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    handleTextChange = (e) => {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n        this.props.messageUpdate(e.target.value);\r\n    }\r\n\r\n    handleTextSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.message) {\r\n            this.props.send();\r\n        }\r\n        this.setState({\r\n            message: ''\r\n        });\r\n        this.props.messageUpdate('');\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                onSubmit={this.handleTextSubmit}\r\n                className=\"send-message-form\">\r\n                <FormGroup>\r\n                    <InputGroup>\r\n                        <Input\r\n                            onChange={this.handleTextChange}\r\n                            value={this.state.message}\r\n                            placeholder=\"Type your message\"\r\n                            autoFocus\r\n                            type=\"text\" />\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <Button outline color=\"danger\">Send</Button>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TextForm;","import React from 'react'\r\nimport { Input, InputGroup, InputGroupAddon, Button, FormGroup, Form, Badge, Label } from 'reactstrap';\r\n\r\nclass NameForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: ''\r\n        }\r\n    }\r\n\r\n    handleNameChange = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n\r\n        this.props.name = e.target.value;\r\n        this.props.nameUpdate(e.target.value);\r\n    }\r\n\r\n    handleNameSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.name) {\r\n            this.props.save();\r\n        }\r\n    }\r\n\r\n    getNameAvailabilityMessage = () => {\r\n        if (this.props.isNameAvailable) {\r\n            return (<Badge color=\"light\">name is available and saved</Badge>)\r\n        } else {\r\n            return (<Badge color=\"warning\">name not available</Badge>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Label>Currently set name:</Label>\r\n                <br />\r\n                <Badge>{this.props.name}</Badge>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <Label>Set your display name:</Label>\r\n                <Form\r\n                    onSubmit={this.handleNameSubmit}>\r\n                    <FormGroup>\r\n                        <InputGroup>\r\n                            <Input\r\n                                onChange={this.handleNameChange}\r\n                                value={this.state.name}\r\n                                placeholder=\"Type your name here\"\r\n                                type=\"text\" />\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <Button outline color=\"danger\">Save</Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                    {this.getNameAvailabilityMessage()}\r\n                </Form>\r\n                <br />\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NameForm;","import React from 'react'\r\nimport { Button, InputGroup, InputGroupAddon, FormGroup, Form } from 'reactstrap';\r\nimport Input from 'reactstrap/lib/Input';\r\n\r\nclass TestArea extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            testImageHash: ''\r\n        }\r\n    }\r\n\r\n    handleTestImageHashChange = (e) => {\r\n        this.setState({\r\n            testImageHash: e.target.value\r\n        })\r\n    }\r\n\r\n    handleTestImageHashSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.testImageHash) {\r\n            this.props.send(this.state.testImageHash)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                onSubmit={this.handleTestImageHashSubmit}\r\n                className=\"send-message-form\">\r\n                <FormGroup>\r\n                    <InputGroup>\r\n                        <Input\r\n                            onChange={this.handleTestImageHashChange}\r\n                            value={this.state.testImageHash}\r\n                            placeholder=\"Type image hash\"\r\n                            type=\"text\" />\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <Button color=\"danger\">Get</Button>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestArea","import React from 'react'\r\nimport { Button, Input, InputGroup, InputGroupAddon, FormGroup, Form, Label, Badge } from 'reactstrap';\r\n\r\nclass ThreadForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            threadName: 'default',\r\n            savedThreadName: 'default'\r\n        }\r\n    }\r\n\r\n    handleThreadNameChange = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            threadName: e.target.value\r\n        });\r\n\r\n        this.props.threadName = e.target.value;\r\n        this.props.threadNameUpdate(e.target.value);\r\n    }\r\n\r\n    handleThreadNameSubmit = (e) => {\r\n        console.log('thread form submit')\r\n        e.preventDefault()\r\n        if (this.state.threadName) {\r\n            this.setState({\r\n                savedThreadName: this.state.threadName\r\n            });\r\n            this.props.setThread();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Label>Currently set thread:</Label>\r\n                <br />\r\n                <Badge>{this.state.savedThreadName}</Badge>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <Label>Set thread:</Label>\r\n                <Form\r\n                    onSubmit={this.handleThreadNameSubmit}\r\n                    className=\"send-message-form\">\r\n                    <FormGroup>\r\n                        <InputGroup>\r\n                            <Input\r\n                                onChange={this.handleThreadNameChange}\r\n                                value={this.state.threadName}\r\n                                placeholder=\"Type your thread name\"\r\n                                autoFocus\r\n                                type=\"text\" />\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <Button outline color=\"danger\">Set</Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ThreadForm;","import React, { useState } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText, ListGroup, ListGroupItem, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst Ujkerdoiv = (props) => {\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(false);\n\n  function Random(props) {\n    var maxNumber = 100000;\n    var randomNumber = Math.floor((Math.random() * maxNumber) + 100000);\n    return <h2>{randomNumber}</h2>;\n  }\n\n  const savekerdoiv = () => {\n    toggle();\n\n    // const todoRef = firebase.database().ref('Todo');\n    const todo = {\n      title: \"anyad2\",\n      complete: \"anyad\"\n    };\n\n    // todoRef.push(todo);\n  }\n\n\n  const toggle = () => setModal(!modal);\n  return (\n    <Form>\n      <FormGroup row>\n        <Label for=\"exampleEmail\" sm={2}>Kérdőív neve</Label>\n        <Col sm={10}>\n          <Input type=\"text\" name=\"text\" id=\"exampleEmail\" placeholder=\"Nevezze el kérdőívét.\" />\n        </Col>\n      </FormGroup>\n      <FormGroup row>\n        <Label for=\"examplePassword\" sm={2}>Kérdések</Label>\n        <Col sm={10}>\n          <Input type=\"text\" name=\"text2\" id=\"example\" placeholder=\"Ide jön a kérdése.\" />\n        </Col>\n      </FormGroup>\n\n\n\n      <FormGroup row>\n\n        <Col sm={{ size: 10 }}>\n          <FormGroup check>\n\n          </FormGroup>\n        </Col>\n      </FormGroup>\n      <FormGroup check row>\n        <Col sm={{ size: 10, offset: 2 }}>\n          <Button onClick={savekerdoiv}>{buttonLabel}Submit</Button>\n          <Modal onclick={toggle} isOpen={modal} toggle={toggle} className={className}>\n            <ModalHeader toggle={toggle}>Kérdőív sikeresen létrehozva </ModalHeader>\n            <ModalBody>\n              <h4>Kérdése: Mennyire volt hatékony a pénteki matekóra?</h4>\n              <text2 />\n              <br></br>\n\n              <h2>Kérdőív kódja: </h2>\n\n              <Random />\n            </ModalBody>\n\n            <ModalFooter>\n\n              <Button color=\"danger\" onClick={toggle}>Visszatér</Button>\n            </ModalFooter>\n          </Modal>\n        </Col>\n      </FormGroup>\n    </Form>\n\n  );\n}\n\n\nexport default Ujkerdoiv;","\nimport { ListGroup, ListGroupItem,Button, Modal, ModalHeader, ModalBody, ModalFooter, Progress, UncontrolledAlert , Alert} from 'reactstrap';\nimport React, { useState } from 'react';\n\nconst popup = (props) => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n  \n  const [visible, setVisible] = useState(true);\n\n  const onDismiss = () => setVisible(false)\n\n  return (\n    <div>\n     \n     \n    \n      <h3>Kérdőívek </h3>\n      <ListGroup>\n        <UncontrolledAlert color=\"primary\"  onClick={toggle}>{buttonLabel} Mennyire volt hatékony a pénteki matekóra?</UncontrolledAlert >\n\n        <UncontrolledAlert color=\"info\" onClick={toggle}>{buttonLabel}Mennyire értetted meg az integrálást?</UncontrolledAlert>\n        <UncontrolledAlert color=\"success\" onClick={toggle}>{buttonLabel}Mennyire sikerült elsajátítani Románia földrajzát?</UncontrolledAlert>\n        <UncontrolledAlert color=\"warning\" onClick={toggle}>{buttonLabel}Milyen mértékben értetted meg a hétfői fizika leckét?</UncontrolledAlert>\n        \n      </ListGroup>\n      \n     \n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Kérdőív eredmenyei </ModalHeader>\n        <ModalBody>\n        <div className=\"text-center\">75%</div>\n      <Progress value={75} />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Részletek megtekintése</Button>{' '}\n          <Button color=\"secondary\" onClick={toggle}>Visszatér</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n    \n  \n}\n\n\nexport default popup;","import { RadioButton, Slider } from 'material-ui';\nimport React, { useState } from 'react';\nimport { MDBRangeInput } from \"mdbreact\";\n\nimport { Col, Button, Form, FormGroup, Label, Input, FormText,ListGroup, ListGroupItem, Modal, ModalHeader, ModalBody, ModalFooter, } from 'reactstrap';\n\nconst Valasz = (props) => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n  const [modal, setModal] = useState(false);\n  \n  \n  \n  const toggle = () => setModal(!modal);\n  return (\n    <Form>\n      \n      <FormGroup row>\n        <Label for=\"examplePassword\" sm={2}>Kérdőív kódja </Label>\n        <Col sm={10}>\n          <Input type=\"text\" name=\"text2\" id=\"example\" placeholder=\"Irja be a kódot.\" />\n        </Col>\n        \n      </FormGroup>\n    \n    \n     \n      <FormGroup row>\n       \n        <Col sm={{ size: 10 }}>\n          <FormGroup check>\n            \n          </FormGroup>\n        </Col>\n      </FormGroup>\n      <FormGroup check row>\n        <Col sm={{ size: 10, offset: 2}}>\n          <Button  onClick={toggle}>{buttonLabel}Submit</Button>\n          <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Válaszoljon a kérdésre</ModalHeader>\n        <ModalBody>\n          <h4>Kérdés:</h4>\n        \n          <div className=\"my-5\">\n      <label htmlFor=\"customRange1\">Example range</label>\n      \n      <input type=\"range\" className=\"custom-range\" id=\"customRange1\" />\n    </div>\n      \n    \n\n        </ModalBody>\n        \n        <ModalFooter>\n        <Label check>\n              <Input color=\"warning\" type=\"checkbox\"  name=\"radio2\" />{' '}\n              Annonim mód\n            </Label>\n          <Button color=\"success\" onClick={toggle}>Küldje el válaszát</Button>\n        </ModalFooter>\n      </Modal>\n        </Col>\n      </FormGroup>\n    </Form>\n    \n  );\n}\n\n\nexport default Valasz;","import React from 'react'\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\n\nimport classnames from 'classnames';\nimport Container from 'reactstrap/lib/Container';\nimport ImageForm from './ImageForm';\nimport TextForm from './TextForm';\nimport NameForm from './NameForm';\nimport TestArea from './TestArea';\nimport ThreadForm from './ThreadForm';\nimport Slider from './Slider';\nimport Ujkerdoiv from './Ujkerdoiv';\nimport Kerdoivek from './Kerdoivek';\nimport List from \"reactstrap\";\nimport Valasz from \"./Valasz\"\n\nclass DiakMenu extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeTab: '1',\n            message: '',\n            name: '',\n            threadName: 'default',\n            image: null\n        }\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n\n   \n\n    render() {\n        return (\n            <Container className=\"wide\">\n                <Nav tabs>\n                   \n                    \n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === '1' })}\n                            onClick={() => { this.toggle('1'); }}\n                        >\n                            Válaszolj\n                         </NavLink>\n                    </NavItem>\n                  \n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId=\"1\">\n                        <br />\n                       <Valasz/>\n                    </TabPane>\n                   \n                </TabContent>\n            </Container>\n        )\n    }\n}\n\nexport default DiakMenu;","import React from 'react';\nimport { List, ListGroup, ListGroupItem } from 'reactstrap';\nimport { Button, Spinner, Container, Row, Col, Jumbotron } from 'reactstrap';\nimport { NavbarToggler, Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\n\nimport DiakMenu from './DiakMenu.js';\n\n\nclass DiakFelulet extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messages: [],\n            showNavbar: false,\n            appStarted: false,\n            workerInitialized: false,\n            show: false,\n            isNameAvailable: false,\n            name: undefined,\n            threadName: 'default'\n        }\n\n        this.broadcastChannel = new BroadcastChannel('broadcastChannel');\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n    }\n\n    toggleNavbar(e) {\n        this.broadcastChannel.postMessage({ command: 'initialSync' });\n        e.preventDefault();\n        this.setState({\n            showNavbar: !this.state.showNavbar\n        });\n    }\n\n    componentDidMount() {\n        this.broadcastChannel.addEventListener('message', this.receiveMessageFromWorker);\n        \n    }\n\n   \n\n    render() {\n        return (\n            <div>\n                <p></p>\n                <Container tag=\"section\" className=\"text-center mb-4\">\n                    <img src=\"logo.png\" alt=\"\" width=\"135px\" />\n                </Container>\n                <Container>\n                    <Row className=\"justify-content-sm-center\">\n                        <Col >\n                            <main>\n\n                                <DiakMenu send={this.sendMessageToWorker}\n                                    saveUsername={this.saveUsername}\n                                    name={this.state.name}\n                                    threadName={this.state.threadName}\n                                    setThread={this.setThread}\n                                    isNameAvailable={this.state.isNameAvailable}\n                                    getImageByHash={this.addImageWithHashToList} />\n                            </main>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default DiakFelulet;","import React from 'react'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Progress } from 'reactstrap';\n\nimport classnames from 'classnames';\nimport Container from 'reactstrap/lib/Container';\nimport ImageForm from './ImageForm';\nimport TextForm from './TextForm';\nimport NameForm from './NameForm';\nimport TestArea from './TestArea';\nimport ThreadForm from './ThreadForm';\nimport Slider from './Slider';\nimport Ujkerdoiv from './Ujkerdoiv';\nimport Kerdoivek from './Kerdoivek';\nimport List from \"reactstrap\";\n\n\nclass TanarMenu extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeTab: '1',\n            message: '',\n            name: '',\n            threadName: 'default',\n            image: null\n        }\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle(tab) {\n        if (this.state.activeTab !== tab) {\n            this.setState({\n                activeTab: tab\n            });\n        }\n    }\n\n   \n\n    render() {\n        return (\n            <Container className=\"wide\">\n                <Nav tabs>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === '1' })}\n                            onClick={() => { this.toggle('1'); }}\n                        >\n                            Kérdőív létrehozása\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === '2' })}\n                            onClick={() => { this.toggle('2'); }}\n                        >\n                            Kérdőív listája\n                         </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: this.state.activeTab === '3' })}\n                            onClick={() => { this.toggle('3'); }}\n                        >\n                            \n                         </NavLink>\n                    </NavItem>\n                    \n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId=\"1\">\n                        <br />\n                        <Ujkerdoiv/>\n                    </TabPane>\n                    <TabPane tabId=\"2\">\n                        <br />\n                    <Kerdoivek/>\n                    </TabPane>\n                \n                        \n                        \n                     \n                    \n                \n                   \n                </TabContent>\n            </Container>\n        )\n    }\n}\n\nexport default TanarMenu;","import React from 'react';\nimport { List, ListGroup, ListGroupItem } from 'reactstrap';\nimport { Button, Spinner, Container, Row, Col, Jumbotron } from 'reactstrap';\nimport { NavbarToggler, Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\n\nimport TanarMenu from './TanarMenu.js';\n\n\nclass TanariFelulet extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messages: [],\n            showNavbar: false,\n            appStarted: false,\n            workerInitialized: false,\n            show: false,\n            isNameAvailable: false,\n            name: undefined,\n            threadName: 'default'\n        }\n\n        this.broadcastChannel = new BroadcastChannel('broadcastChannel');\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n    }\n\n    toggleNavbar(e) {\n        this.broadcastChannel.postMessage({ command: 'initialSync' });\n        e.preventDefault();\n        this.setState({\n            showNavbar: !this.state.showNavbar\n        });\n    }\n\n    componentDidMount() {\n        this.broadcastChannel.addEventListener('message', this.receiveMessageFromWorker);\n        \n    }\n\n  \n    render() {\n        return (\n            <div>\n                <Container tag=\"section\" className=\"text-center mb-4\">\n                    <img src=\"logo.png\" alt=\"\" width=\"135px\" />\n                </Container>\n                <Container>\n                    <Row className=\"justify-content-sm-center\">\n                        <Col >\n                            <main>\n\n                                <TanarMenu send={this.sendMessageToWorker}\n                                    saveUsername={this.saveUsername}\n                                    name={this.state.name}\n                                    threadName={this.state.threadName}\n                                    setThread={this.setThread}\n                                    isNameAvailable={this.state.isNameAvailable}\n                                    getImageByHash={this.addImageWithHashToList} />\n                            </main>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default TanariFelulet;","import React from 'react'\r\nimport DiakFelulet from './DiakFelulet.js'\r\nimport TanariFelulet from './TanariFelulet.js'\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Button, Spinner, Container, Row, Col, Jumbotron } from 'reactstrap';\r\nimport { NavbarToggler, Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport toaster from 'toasted-notes';\r\nimport 'toasted-notes/src/styles.css';\r\nimport firebase from \"firebase\";\r\n\r\n\r\n///ez a 2 vart adtam hozza \r\n///var admin = require(\"firebase-admin\");\r\n\r\n///var serviceAccount = require(\"path/to/serviceAccountKey.json\");\r\n\r\n///admin.initializeApp({\r\n  ///credential: admin.credential.cert(serviceAccount),\r\n  ///databaseURL: \"https://connected-5c042.firebaseio.com\"\r\n\r\n\r\n\r\n// s ezt meghivod a button action-jeben\r\n\r\n    \r\n    \r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            messages: [],\r\n            showNavbar: false,\r\n            appStarted: false,\r\n            workerInitialized: false,\r\n            show: false,\r\n            isNameAvailable: false,\r\n            name: undefined,\r\n            threadName: 'default'\r\n        }\r\n\r\n        this.broadcastChannel = new BroadcastChannel('broadcastChannel');\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    }\r\n\r\n    renderLoadedState = () => {\r\n        const { messages } = this.state;\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route path=\"/\" component={DiakFelulet} exact />\r\n                        <Route path=\"/tanar\" component={TanariFelulet} exact />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    toggleNavbar(e) {\r\n        this.broadcastChannel.postMessage({ command: 'initialSync' });\r\n        e.preventDefault();\r\n        this.setState({\r\n            \r\n            showNavbar: !this.state.showNavbar\r\n        });\r\n    }\r\n\r\n  \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar className=\"header\" color=\"faded\" light expand=\"md\">\r\n                    <Container>\r\n                        <NavbarBrand className=\"mr-auto\" to=\"/\">ConnectED</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} />\r\n                        <Collapse navbar isOpen={this.state.showNavbar}>\r\n                            <Nav navbar className=\"ml-sm-auto\">\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://apaczai.ro/\">Iskola weboldala</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink href=\"\">Teams</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n                {this.renderLoadedState() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  console.log('About to register service worker');\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      console.log('Service worker registered');\r\n\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}